<%
  require 'uri'
  require 'rack/utils'
  require 'onboard/extensions/sinatra/base'

  names = request.path_info.sub(/\.html$/, "").split('/')
  basepath = "/"
  links = []
  links << {:name => "Home", :path => "/"}
  names.each do |name|
    basepath = (basepath + "/" + name).gsub /\/{2,}/, "/"
    path = basepath + ".html"
    links << {:name => Rack::Utils::unescape(name), :path => path}
  end
%>

      <div id="navbar">
        <%
          http_errors = false
          http_explicit_20x = false
          http_errors = true if status.to_s =~ /300|4..|5../
          http_explicit_20x = true if
              status.to_s =~ /20[^0]/ or
              (status == 200 and @real_request.request_method != 'GET')
        %>
        <% if http_errors %>
          <span class="error"><%= Rack::Utils::HTTP_STATUS_CODES[status] %></span>
        <% elsif http_explicit_20x %>
          <span class="info"><%= Rack::Utils::HTTP_STATUS_CODES[status] %></span>
        <% end %>
        <% links.each do |link| %>
          <%
            if link[:name] =~ /\S+/ # don't ask me why... :-P
          %>
            <% if link == links.last %>
              &raquo; <%= link[:name] %>
            <% else %>
              <% if routed? link[:path] %>
                &raquo; <a href="<%= link[:path] %>"><%= link[:name] %></a>
              <% else %>
                &raquo; <%= link[:name] %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
        <span style="margin-left:2em;">
          <%
            begin
              referrer_path = URI.parse(request.referer).path
            rescue URI::InvalidURIError
              referrer_path = nil
            end
          %>
          <span <%= 'style="display:none;"' if referrer_path == request.path_info or request.env['REQUEST_METHOD'] == 'GET' %>>
            <%
            # ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
            # When using https proxy, request.url may be uncorrecly
            # set to http:// instead of https://. Work around this by ignoring
            # the protocol part.
            %>
            | <a href="<%= request.referer %>">Back</a>
          </span>
          <span <%= 'style="visibility:hidden;"' unless routed? request.path_info, 'GET' %>>
            | <a href="<%= request.fullpath %>">Refresh</a>
          </span>
        </span>
      </div>

