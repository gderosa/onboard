<%
  all_vm_uuids ||= []
%>


<script type="text/javascript">
  function popup_filechooser(target) {
    var popup = window.open('/jqueryFileTree/popup.html', 'Choose File', 'width=300,height=300');
    popup.target = target;
  }
  function qemuImgCreateControls(idx) {
    var checkbox = document.getElementById('disk_' + idx + '_qemu-img_create_checkbox');
    if ( checkbox.checked ) {
      document.getElementById('disk_' + idx + '_path'                   ).disabled = true;
      document.getElementById('disk_' + idx + '_qemu-img_create_size'   ).disabled = false;
      document.getElementById('disk_' + idx + '_qemu-img_create_fmt'    ).disabled = false;
      document.getElementById('disk_' + idx + '_qemu-img_create_subdir' ).disabled = false;
    } else {
      document.getElementById('disk_' + idx + '_path'                   ).disabled = false;
      document.getElementById('disk_' + idx + '_qemu-img_create_size'   ).disabled = true;
      document.getElementById('disk_' + idx + '_qemu-img_create_fmt'    ).disabled = true;
      document.getElementById('disk_' + idx + '_qemu-img_create_subdir' ).disabled = true;
    }
  }
  function qemuNetIfControls() {
    var i = 0;
    var typeSelect;
    while(typeSelect = document.getElementById('net[' + i + '][type]')) {
      switch(typeSelect.value) {
        case 'none':
          document.getElementById('net[' + i + '][ifname]'  ).disabled = true;
          document.getElementById('net[' + i + '][bridge]'  ).disabled = true;
          document.getElementById('net[' + i + '][model]'   ).disabled = true;
          document.getElementById('net[' + i + '][macaddr]' ).disabled = true;
          break;
        case 'user':
          document.getElementById('net[' + i + '][ifname]'  ).disabled = true;
          document.getElementById('net[' + i + '][bridge]'  ).disabled = true;
          document.getElementById('net[' + i + '][model]'   ).disabled = false;
          document.getElementById('net[' + i + '][macaddr]' ).disabled = false;
          break;
        case 'tap':
          document.getElementById('net[' + i + '][ifname]'  ).disabled = false;
          document.getElementById('net[' + i + '][bridge]'  ).disabled = false;
          document.getElementById('net[' + i + '][model]'   ).disabled = false;
          document.getElementById('net[' + i + '][macaddr]' ).disabled = false;
          break;
      }
      i++;
    }
  }
  function qemuSaveRestoreControls(uuid) {
    if ( uuid ) {
      this.uuids = [uuid];
      this.uuidsLength = 1;
    } else {
      this.uuids = this.uuids || <%= all_vm_uuids %>;
      this.uuidsLength = this.uuids.length;
    }
    for (var i=0; i<uuidsLength; i++) {
      var uuid = uuids[i];
      var quit_button =
          document.getElementById('quit[' + uuid + ']');
      var quit_button_img =
          document.getElementById('quit_button_img[' + uuid + ']');
      var saverestore_checkbox =
          document.getElementById('saverestore[' + uuid + ']');
      if (saverestore_checkbox.checked || quit_button.disabled) {
        quit_button_img.src = '<%= action_icon_path(:stop) %>';
        quit_button.title = 'Quit virtualization and save machine state';
      } else {
        quit_button_img.src = '<%= action_icon_path(:process_stop) %>';
      quit_button.title = 'Quit virtualization immediately (beware: you may corrupt data!)';
      }
    }
  }
  function qemuRefreshScreenshot(id, basepath) {
    var screenshot = document.getElementById(id);
    if (screenshot) {
      var src = basepath + '#cachebust-' + new Date().getTime();
      var request = new XMLHttpRequest();
      request.open("HEAD", src, false);
      request.send();
      if (request.status === 200) {
        screenshot.src = src;
        screenshot.style.display = '';
      } else {
        screenshot.style.display = 'none';
      }
    }
  }
  function qemuRefreshHTML(id, basepath) {
    var elem = document.getElementById(id);
    if (elem) {
      var fetch_from = basepath + '?cachebust=' + new Date().getTime();
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.open("GET", fetch_from, false);
      xmlhttp.send();
      if (xmlhttp.status === 200) {
        var snippet = xmlhttp.responseText;
        elem.innerHTML = snippet;
      }
    }
  }
  function qemuIsRunning(vmid, basepath) {
    if (typeof basepath === 'undefined')
      basepath = '';
    var fetch_from = basepath + vmid + '/running.json';
    var request = new XMLHttpRequest();
    var isRunning = null;
    request.open("GET", fetch_from, false);
    request.send();
    if (request.status === 200) {
      var isRunning = JSON.parse(request.responseText).running;
    }
    return isRunning;
  }
</script>
